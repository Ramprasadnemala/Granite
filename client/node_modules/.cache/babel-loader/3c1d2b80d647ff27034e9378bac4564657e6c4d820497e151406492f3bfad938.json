{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rampr\\\\OneDrive\\\\Desktop\\\\Granite\\\\client\\\\src\\\\components\\\\headerSelection\\\\HeaderSelect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './HeaderSelect.css'; // Import CSS file for styling\nimport PopupForm from './PopupForm/PopupForm';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HeaderSelect = () => {\n  _s();\n  const [showPopup, setShowPopup] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check local storage for logged-in state on component mount\n    const loggedInStatus = localStorage.getItem('loggedIn') === 'true';\n    setLoggedIn(loggedInStatus);\n  }, []);\n  const togglePopup = () => {\n    setShowPopup(prevState => !prevState);\n  };\n  const handleLogout = () => {\n    // Perform logout action here, such as clearing session, resetting user state, etc.\n    // Set logged-in state to false and remove from local storage\n    setLoggedIn(false);\n    localStorage.setItem('loggedIn', 'false');\n  };\n  const handleLogin = () => {\n    // Set logged-in state to true and save to local storage\n    setLoggedIn(true);\n    localStorage.setItem('loggedIn', 'true');\n    // togglePopup(); // Close the popup after login\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar2001\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-logo2001\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"GRANITES SERVICES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), loggedIn ? /*#__PURE__*/_jsxDEV(Link, {\n        to: \"./\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"login2001\",\n          onClick: handleLogout,\n          children: \"LogOut\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login2001\",\n        onClick: togglePopup,\n        children: \"LogIn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(PopupForm, {\n        setLoggedIn: handleLogin,\n        onClose: togglePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(HeaderSelect, \"QaVtbwPFXbYAAfot3IQ4+s/Jzx0=\");\n_c = HeaderSelect;\nexport default HeaderSelect;\nvar _c;\n$RefreshReg$(_c, \"HeaderSelect\");","map":{"version":3,"names":["React","useState","useEffect","PopupForm","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","HeaderSelect","_s","showPopup","setShowPopup","loggedIn","setLoggedIn","loggedInStatus","localStorage","getItem","togglePopup","prevState","handleLogout","setItem","handleLogin","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","onClick","onClose","_c","$RefreshReg$"],"sources":["C:/Users/rampr/OneDrive/Desktop/Granite/client/src/components/headerSelection/HeaderSelect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './HeaderSelect.css'; // Import CSS file for styling\r\nimport PopupForm from './PopupForm/PopupForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderSelect = () => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Check local storage for logged-in state on component mount\r\n        const loggedInStatus = localStorage.getItem('loggedIn') === 'true';\r\n        setLoggedIn(loggedInStatus);\r\n    }, []);\r\n\r\n    const togglePopup = () => {\r\n        setShowPopup(prevState => !prevState);\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        // Perform logout action here, such as clearing session, resetting user state, etc.\r\n        // Set logged-in state to false and remove from local storage\r\n        setLoggedIn(false);\r\n        localStorage.setItem('loggedIn', 'false');\r\n    };\r\n\r\n    const handleLogin = () => {\r\n        // Set logged-in state to true and save to local storage\r\n        setLoggedIn(true);\r\n        localStorage.setItem('loggedIn', 'true');\r\n        // togglePopup(); // Close the popup after login\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar2001\">\r\n                <div className=\"nav-logo2001\">\r\n                    {/* <span><img src={crean} alt='crean' style={{ height: \"50px\", width: \"70px\", borderRadius: \"10px\" }} /></span> */}\r\n                    {/* <Link to=\"./\" style={{ color: '#fff',textDecoration:\"none\",cursor:\"pointer\" }}> */}\r\n                    <span>GRANITES SERVICES</span>\r\n                    {/* </Link> */}\r\n                </div>\r\n               \r\n                {loggedIn ? (\r\n                    <Link to=\"./\">\r\n                        <button className='login2001' onClick={handleLogout}>LogOut</button>\r\n                    </Link>\r\n                ) : (\r\n                    <button className='login2001' onClick={togglePopup}>LogIn</button>\r\n                )}\r\n                {showPopup && <PopupForm setLoggedIn={handleLogin} onClose={togglePopup} />}\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HeaderSelect;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB,CAAC,CAAC;AAC7B,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMa,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,MAAM;IAClEH,WAAW,CAACC,cAAc,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACtBN,YAAY,CAACO,SAAS,IAAI,CAACA,SAAS,CAAC;EACzC,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB;IACA;IACAN,WAAW,CAAC,KAAK,CAAC;IAClBE,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC;EAC7C,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB;IACAR,WAAW,CAAC,IAAI,CAAC;IACjBE,YAAY,CAACK,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;IACxC;EACJ,CAAC;EAED,oBACIf,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACIjB,OAAA;MAAKkB,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACvBjB,OAAA;QAAKkB,SAAS,EAAC,cAAc;QAAAD,QAAA,eAGzBjB,OAAA;UAAAiB,QAAA,EAAM;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE7B,CAAC,EAELf,QAAQ,gBACLP,OAAA,CAACF,IAAI;QAACyB,EAAE,EAAC,IAAI;QAAAN,QAAA,eACTjB,OAAA;UAAQkB,SAAS,EAAC,WAAW;UAACM,OAAO,EAAEV,YAAa;UAAAG,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,gBAEPtB,OAAA;QAAQkB,SAAS,EAAC,WAAW;QAACM,OAAO,EAAEZ,WAAY;QAAAK,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACpE,EACAjB,SAAS,iBAAIL,OAAA,CAACH,SAAS;QAACW,WAAW,EAAEQ,WAAY;QAACS,OAAO,EAAEb;MAAY;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E;EAAC,gBACR,CAAC;AAEX,CAAC;AAAAlB,EAAA,CAjDKD,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAmDlB,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}